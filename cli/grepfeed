#!/usr/bin/env node
/*
  filter by:

  -d [-]date[,date]
  -c categories

  by default (in this order): title, summary, description, author

  -e: print only articles w/ enclosures
  -n digit: number of articles to print
  -x: print xml
  -m: print only meta
*/

'use strict';

let path = require('path')

let minimist = require('minimist')
//let Mustache = require('mustache')

let feed = require('../lib/feed')

let errx = function(msg) {
    console.error(path.basename(process.argv[1]) + " error: " + msg)
    process.exit(1)
}

Array.prototype.toString = function() {
    return this.join(", ")
}

class MyGrep extends feed.Grep {
    event_exit() {
	process.exit(0)
    }

    event_fp_error(err) {
	let msg = err.message
	if (this.opts.debug) msg += "\n" + err.stack
	errx(`feedparser: ${msg}`)
    }

    print_meta(data) {
	data.forEach( (idx) => {
	    let key = Object.keys(idx)[0]
	    if (idx[key]) console.log(`${key}: ${idx[key]}`)
	})
	let encl = this.encl_stat()
	if (encl.total)
	    console.log(`enclosures: ${encl.total}/${encl.articles}/${this.articles.length}`)
	process.exit(0)
    }

    print_article(article) {
	if (this._articles_matched > 1) console.log("")

	article.forEach( (idx) => {
	    let key = Object.keys(idx)[0]
	    if (this._article_text_prop[key]) return

	    if (idx[key]) {
		if (key.match(/\.__text$/))
		    this._article_text_prop[key.split(".")[0]] = true
		console.log(`${key}: ${idx[key]}`)
	    }
	})
    }
}


// main

let argv = minimist(process.argv.slice(2),
		    { boolean: ['v', 'e', 'x', 'm', 'debug'],
		      string: ['d', 'c', 'n'] })
if (argv.debug) console.error(argv)

let mfp = new MyGrep(argv)
mfp.parse(process.stdin)
mfp.event.on("end", () => {
    if (!argv.m && mfp._articles_matched === 0) {
	process.exit(1)
    }
})
