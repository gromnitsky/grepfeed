#!/usr/bin/env node
/*
  filter by:

  -d [-]date[,date]
  -c categories

  by default (in this order): title, summary, description, author

  -e: print only articles w/ enclosures
  -n digit: number of articles to print
  -x: print xml
  -m: print only meta
*/

'use strict';

let path = require('path')
let util = require('util')

let minimist = require('minimist')
let xml_encode = require('ent/encode')

let feed = require('../lib/feed')

let errx = function(msg) {
    console.error(path.basename(process.argv[1]) + " error: " + msg)
    process.exit(1)
}

Date.prototype.toString = function() {
    return this.toUTCString()
}

Array.prototype.toString = function() {
    return this.join(", ")
}

class MyGrep extends feed.Grep {
    event_exit() {
	process.exit(0)
    }

    event_fp_error(err) {
	let msg = err.message
	if (this.opts.debug) msg += "\n" + err.stack
	let prefix = "feedparser: "
	if (err instanceof feed.GrepError) prefix = ""
	errx(`${prefix}${msg}`)
    }

    print_meta(data) {
	for (let key in data) {
	    if (data[key]) console.log(`${key}: ${data[key]}`)
	}
	let encl = this.encl_stat()
	if (encl.total)
	    console.log(`enclosures: ${encl.total}/${encl.articles}/${this.articles.length}`)
	process.exit(0)
    }

    print_article(article) {
	if (this._articles_matched > 1) console.log("")

	for (let key in article) {
	    if (!article[key]) continue
	    if (this._article_text_prop[key]) continue

	    if (key.match(/\.__text$/))
		this._article_text_prop[key.split(".")[0]] = true

	    console.log(`${key}: ${article[key]}`)
	}
    }
}

class MyGrepXML extends MyGrep {
    constructor(opts) {
	super(opts)

	Array.prototype.toString = function() {
	    return this.join("\n")
	}
	feed.Enclosure.prototype.toString = function() {
	    return `<enclosure url="${this.obj.url}" type="${this.obj.type}" length="${this.obj.length}" />`
	}
	feed.Category.prototype.toString = function() {
	    return `<category>${xml_encode(this.name)}</category>`
	}

	this.event.once("end", () => {
	    if (this._articles_matched !== 0 || opts.m)
		console.log("\n</channel>\n</rss>")
	})
    }

    print_meta(data) {
	console.log(`<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>`)
	let xmlurl = data["atom:link"] || "http://example.com/missing/atom/self/link"
	console.log(`<atom:link href="${xmlurl}" rel="self" type="application/rss+xml" />`)
	for (let key in data) {
	    if (!data[key] || key.match(/^(itunes|atom):/)) continue
	    if (key === "categories") {
		console.log(data[key].toString())
		continue
	    }
	    console.log(`<${key}>${xml_encode(data[key].toString())}</${key}>`)
	}
    }

    print_article(article) {
	if (this._articles_matched === 1) this.print_meta(this.meta)

	console.log("\n<item>")
	for (let key in article) {
	    if (!article[key]) continue
	    if (this._article_text_prop[key]) continue

	    if (key.match(/\.__text$/))
		this._article_text_prop[key.split(".")[0]] = true

	    let val = xml_encode(article[key].toString())

	    if (key.match(/^summary/)) continue // rss 2.0 lacks it
	    if (key.match(/^#$/)) {
		console.log(`<!-- ${key}: ${val} -->`)
		continue
	    }
	    if (key.match(/^(categories|enclosures)$/)) {
		console.log(article[key].toString())
		continue
	    }
	    if (key.match(/^description/)) key = "description"

	    console.log(`<${key}>${val}</${key}>`)
	}

	console.log("</item>")
    }
}


// main

let argv = minimist(process.argv.slice(2),
		    { boolean: ['v', 'e', 'x', 'm', 'debug'],
		      string: ['d', 'c', 'n'] })
if (argv.debug) console.error(argv)

let mfp = argv.x ? new MyGrepXML(argv) : new MyGrep(argv)
mfp.parse(process.stdin)
mfp.event.once("end", () => {
    if (!argv.m && mfp._articles_matched === 0) process.exit(1)
    process.exit(0)
})
